---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This template creates a new Customer VPC used for the VPN exercise.
  The template also creates an EC2 instance on the private subnet for testing
  purposes, and an RDS MySQL instance.

Parameters:
  CustomerStackName:
    Description: >
      Name of the stack that deployed the Customer VPC
      for the bastion GE
    Type: String
  RosaStackName:
    Description: >
      Name of the stack that deployed the AWS infrastructure
      for the ROSA cluster.
    Type: String
  pCustomerVpcVpnCidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.3.0.0/16
    Description: Customer VPC CIDR block (10.3.0.0/16 for example).
    Type: String
  pCustomerVpcVpnPrivateSubnetACidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.3.0.0/24
    Description: >
      CIDR block for the private subnet in the customer VPC
      (10.3.0.0/24 for example).
    Type: String
  pCustomerVpcVpnPrivateSubnetBCidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.3.1.0/24
    Description: >
      CIDR block for the private subnet in the customer VPC
      (10.3.1.0/24 for example).
    Type: String
  pAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  pVpnClientCertARN:
    Description: >
      Identifier for the Client certificate stored in
      the AWS certificate manager.
    Type: String
  pVpnServerCertARN:
    Description: >
      Identifier for the Server certificate stored in
      the AWS certificate manager.
    Type: String

Resources:
  # # Customer VPC for the VPN exercise
  # rCustomerVpcVpn:
  #   Type: AWS::EC2::VPC
  #   Properties:
  #     CidrBlock:
  #       Ref: pCustomerVpcVpnCidrBlock
  #     EnableDnsSupport: true
  #     EnableDnsHostnames: true
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-customer-vpc-vpn"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220

  # # Private subnet A in the customer VPC VPN
  # rCustomerVpcVpnPrivateSubnetA:
  #   Type: AWS::EC2::Subnet
  #   DependsOn: rCustomerVpcVpn
  #   Properties:
  #     VpcId:
  #       Ref: rCustomerVpcVpn
  #     CidrBlock:
  #       Ref: pCustomerVpcVpnPrivateSubnetACidrBlock
  #     # Uses the first AZ available
  #     AvailabilityZone:
  #       Fn::Select:
  #         - 0
  #         - Fn::GetAZs: ""
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-customer-private-subnet-vpn-a"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220

  # Private subnet B for the RDS
  # rCustomerVpcVpnPrivateSubnetB:
  #   Type: AWS::EC2::Subnet
  #   DependsOn: rCustomerVpcVpn
  #   Properties:
  #     VpcId:
  #       Ref: rCustomerVpcVpn
  #     CidrBlock:
  #       Ref: pCustomerVpcVpnPrivateSubnetBCidrBlock
  #     # Uses the first AZ available
  #     AvailabilityZone:
  #       Fn::Select:
  #         - 1
  #         - Fn::GetAZs: ""
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-customer-private-subnet-vpn-b"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220

  # # NACL for the private subnet A
  # rNetworkAclCustomerVpcVpnPrivateSubnetA:
  #   Type: AWS::EC2::NetworkAcl
  #   Properties:
  #     VpcId:
  #       Ref: rCustomerVpcVpn
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-nacl-customer-subnet-vpn-a"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220
  # rNetworkAclAssociationCustomerVpcVpnPrivateSubnet:
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
  #   DependsOn:
  #     - rCustomerVpcVpnPrivateSubnetA
  #     - rNetworkAclCustomerVpcVpnPrivateSubnetA
  #   Properties:
  #     SubnetId:
  #       Ref: rCustomerVpcVpnPrivateSubnetA
  #     NetworkAclId:
  #       Ref: rNetworkAclCustomerVpcVpnPrivateSubnetA
  # # NACL for the private subnet B
  # rNetworkAclCustomerVpcVpnPrivateSubnetB:
  #   Type: AWS::EC2::NetworkAcl
  #   Properties:
  #     VpcId:
  #       Ref: rCustomerVpcVpn
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-nacl-customer-subnet-vpn-b"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220
  # rNetworkAclAssociationCustomerVpcVpnPrivateSubnetB:
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
  #   DependsOn:
  #     - rCustomerVpcVpnPrivateSubnetB
  #     - rNetworkAclCustomerVpcVpnPrivateSubnetB
  #   Properties:
  #     SubnetId:
  #       Ref: rCustomerVpcVpnPrivateSubnetB
  #     NetworkAclId:
  #       Ref: rNetworkAclCustomerVpcVpnPrivateSubnetB

  # Client VPN Endpoint
  # rCustomerClientVpnEndpoint:
  #   Type: AWS::EC2::ClientVpnEndpoint
  #   Properties:
  #     AuthenticationOptions:
  #       - Type: "certificate-authentication"
  #         MutualAuthentication:
  #           ClientRootCertificateChainArn:
  #             Ref: pVpnClientCertARN
  #     DnsServers:
  #       - "10.3.0.2"
  #     SplitTunnel: true
  #     TransportProtocol: "udp"
  #     ServerCertificateArn:
  #       Ref: pVpnServerCertARN
  #     ClientCidrBlock: "172.16.0.0/16"
  #     ConnectionLogOptions:
  #       Enabled: false
  #     TagSpecifications:
  #       - ResourceType: "client-vpn-endpoint"
  #         Tags:
  #           - Key: "Name"
  #             Value:
  #               Fn::Join:
  #                 - ""
  #                 - - Fn::ImportValue:
  #                       !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #                   - "-customer-client-vpn-endpoint"
  #           - Key: "redhattraining:course-sku"
  #             Value: "CS220-vpn"
  # # Target Customer Network association for the VPN endpoint
  # rCustomerClientVpnTargetNetwork:
  #   Type: AWS::EC2::ClientVpnTargetNetworkAssociation
  #   Properties:
  #     ClientVpnEndpointId:
  #       Ref: rCustomerClientVpnEndpoint
  #     SubnetId:
  #       Ref: rCustomerVpcVpnPrivateSubnetA

  # Keypair is stored in AWS Systems Manager at /ec2/keypair/<key-pair-id>
  rKeyPairEc2Vpn:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName:
        Fn::Join:
          - ""
          - - Fn::ImportValue:
                !Join [":", [!Ref RosaStackName, RosaClusterName]]
            - "-ec2KeyPairVpn"
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Fn::ImportValue:
                    !Join [":", [!Ref RosaStackName, RosaClusterName]]
                - "-ec2-keypair-customer-vpc-vpn"
        - Key: "redhattraining:course-sku"
          Value: CS220-vpn

  # # Default Security Group for the VPC
  # rEc2InstanceSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Enable SSH access via port 22
  #     VpcId: !Ref rCustomerVpcVpn
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-ec2-instance-vpn-sg"
  #     SecurityGroupIngress:
  #       - CidrIp: 0.0.0.0/0
  #         FromPort: 22
  #         ToPort: 22
  #         IpProtocol: tcp


  # # Security Group for rds
  # rSecurityGroupDatabase:
  #   Type: AWS::EC2::SecurityGroup
  #   DependsOn: rCustomerVpcVpn
  #   Properties:
  #     GroupDescription: Enable mysql connectivity to Rosa cluster
  #     GroupName: Database Security Group
  #     VpcId: !Ref rCustomerVpcVpn
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-database-sg"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220
  #     SecurityGroupIngress:
  #       - CidrIp:
  #           Fn::ImportValue: !Join [":", [!Ref RosaStackName, RosaVpcCidr]]
  #         FromPort: 3306
  #         ToPort: 3306
  #         IpProtocol: tcp
  #     SecurityGroupEgress:
  #       - CidrIp:
  #           Fn::ImportValue: !Join [":", [!Ref RosaStackName, RosaVpcCidr]]
  #         FromPort: 1024
  #         ToPort: 65535
  #         IpProtocol: tcp
  # # Database subnet group
  # rRdsDBSubnetGroup:
  #   Type: "AWS::RDS::DBSubnetGroup"
  #   Properties:
  #     DBSubnetGroupName: testdbsubnetgroup
  #     DBSubnetGroupDescription: custom db subnet group
  #     SubnetIds:
  #       - !Ref rCustomerVpcVpnPrivateSubnetA
  #       - !Ref rCustomerVpcVpnPrivateSubnetB
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-db-subnetgroup"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220

  # Create an EC2 instance
  rEc2InstaceVpn:
    Type: AWS::EC2::Instance
    # DependsOn:
    #   - Fn::ImportValue:
    #       !Join [":", [!Ref RosaStackName, SecurityGroupBastion]]
    #   - Fn::ImportValue:
    #       !Join [":", [!Ref RosaStackName, CustomerVPCPrivateSubnetA]]
    Properties:
      InstanceType: t2.micro
      KeyName:
        Fn::Join:
          - ""
          - - Fn::ImportValue:
                !Join [":", [!Ref RosaStackName, RosaClusterName]]
            - "-ec2KeyPairVpn"
      ImageId: !Ref pAmiId
      NetworkInterfaces:
        - GroupSet:
            - Fn::ImportValue:
                !Join ["-", [!Ref CustomerStackName, SecurityGroupBastion]]
          AssociatePublicIpAddress: false
          DeviceIndex: 0
          DeleteOnTermination: true
          SubnetId:
            - Fn::ImportValue:
                !Join ["-", [!Ref CustomerStackName, CustomerVPCPrivateSubnetA]]
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Fn::ImportValue:
                    !Join [":", [!Ref RosaStackName, RosaClusterName]]
                - "-ec2-instance-customer-vpc-vpn"
        - Key: "redhattraining:course-sku"
          Value: CS220-vpn
  # # RDS mysql instance. Application on Rosa will connect to it.
  # rRdsInstance:
  #   Type: "AWS::RDS::DBInstance"
  #   Properties:
  #     DBInstanceClass: db.t3.micro
  #     MultiAZ: false
  #     AvailabilityZone:
  #       Fn::Select:
  #         - 0
  #         - Fn::GetAZs: ""
  #     Engine: mysql
  #     EngineVersion: 8.0.33
  #     MasterUsername: admin
  #     MasterUserPassword: redhat123
  #     Port: "3306"
  #     DBInstanceIdentifier: rds-mysql
  #     AllocatedStorage: "20"
  #     DBName: quotesdb
  #     StorageEncrypted: false
  #     StorageType: standard
  #     BackupRetentionPeriod: 1
  #     DeleteAutomatedBackups: true
  #     DeletionProtection: false
  #     DBSubnetGroupName:
  #       Ref: rRdsDBSubnetGroup
  #     VPCSecurityGroups:
  #       - !Ref rSecurityGroupDatabase
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-database-instance"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220

Outputs:
  oStackName:
    Description: Name of the stack
    Value:
      Ref: AWS::StackName
